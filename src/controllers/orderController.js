const Order = require("../models/Order");
const Cart = require("../models/Cart");

exports.createOrder = async (req, res) => {
  const { userId, infoCustomer, rentalDate, notes, items, totalCost } =
    req.body;
  console.log("üöÄ ~ exports.createOrder= ~ req.body:", req.body);

  try {
    // Ki·ªÉm tra xem c√≥ gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng kh√¥ng
    const cart = await Cart.findOne({ userId }).populate("items.productId");
    if (!cart) {
      return res.status(400).json({ message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
    }

    // T√≠nh t·ªïng s·ªë ti·ªÅn c·ªßa ƒë∆°n h√†ng
    const totalAmount = items.reduce(
      (total, item) => total + item.price * item.quantity,
      0
    );

    // T·∫°o m·ªõi ƒë∆°n h√†ng v·ªõi th√¥ng tin kh√°ch h√†ng v√† c√°c m·∫∑t h√†ng trong gi·ªè
    const order = new Order({
      userId,
      items: items.map((item) => ({
        productId: item.productId,
        quantity: item.quantity,
        price: item.price,
      })),
      infoCustomer,
      rentalDate,
      notes,
      totalAmount,
      totalCost,
    });

    // L∆∞u ƒë∆°n h√†ng v√†o c∆° s·ªü d·ªØ li·ªáu
    await order.save();
    console.log("üöÄ ~ exports.createOrder= ~ order:", order);

    // Ph·∫£n h·ªìi th√†nh c√¥ng
    res.status(201).json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng", order });
  } catch (err) {
    console.error("Error creating order:", err);
    res
      .status(500)
      .json({ message: "C√≥ l·ªói x·∫£y ra khi t·∫°o ƒë∆°n h√†ng", error: err });
  }
};
exports.getAllOrders = async (req, res) => {
  try {
    const orders = await Order.find(); // Truy v·∫•n t·∫•t c·∫£ ƒë∆°n h√†ng trong c∆° s·ªü d·ªØ li·ªáu
    if (!orders.length) {
      return res.status(404).json({ message: "Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o" });
    }
    res
      .status(200)
      .json({ message: "L·∫•y danh s√°ch t·∫•t c·∫£ ƒë∆°n h√†ng th√†nh c√¥ng", orders });
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch t·∫•t c·∫£ ƒë∆°n h√†ng:", error);
    res.status(500).json({ message: "L·ªói server", error });
  }
};

// L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng
exports.getOrders = async (req, res) => {
  const { userId } = req.params;
  try {
    const orders = await Order.find({ userId });
    if (!orders.length)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });

    res
      .status(200)
      .json({ message: "L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng", orders });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
};
// C·∫≠p nh·∫≠t ƒë√°nh gi√° c·ªßa ƒë∆°n h√†ng
exports.updateEvaluation = async (req, res) => {
  const { evaluation } = req.body;
  const { id } = req.params;

  try {
    // Ki·ªÉm tra xem ƒë√°nh gi√° c√≥ h·ª£p l·ªá kh√¥ng
    if (!evaluation) {
      return res.status(400).json({
        message: "ƒê√°nh gi√° kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
      });
    }

    const order = await Order.findByIdAndUpdate(
      id,
      { evaluation }, // C·∫≠p nh·∫≠t tr∆∞·ªùng evaluation
      { new: true, runValidators: true }
    );
    console.log("üöÄ ~ exports.updateEvaluation= ~ order:", order);

    if (!order) {
      return res.status(404).json({
        message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng ƒë·ªÉ c·∫≠p nh·∫≠t ƒë√°nh gi√°",
      });
    }

    res.status(200).json(order);
  } catch (error) {
    console.error("Error updating order evaluation:", error);
    res.status(500).json({
      message: "L·ªói khi c·∫≠p nh·∫≠t ƒë√°nh gi√°",
      error: error.message,
    });
  }
};
// L·∫•y chi ti·∫øt ƒë∆°n h√†ng theo ID
exports.getOrderById = async (req, res) => {
  const { orderId } = req.params;
  try {
    const order = await Order.findById(orderId);
    if (!order)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });

    res
      .status(200)
      .json({ message: "L·∫•y chi ti·∫øt ƒë∆°n h√†ng th√†nh c√¥ng", order });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
};

// C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng theo ID
// C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa ƒë∆°n h√†ng theo ID
exports.updateOrderStatus = async (req, res) => {
  const { orderId } = req.params; // L·∫•y orderId t·ª´ URL
  const { status } = req.body; // L·∫•y status t·ª´ request body

  try {
    // C·∫≠p nh·∫≠t ch·ªâ tr∆∞·ªùng status c·ªßa ƒë∆°n h√†ng
    const updatedOrder = await Order.findByIdAndUpdate(
      orderId,
      { status },
      { new: true } // Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng ƒë√£ c·∫≠p nh·∫≠t
    );

    // N·∫øu kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng, tr·∫£ v·ªÅ l·ªói 404
    if (!updatedOrder) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }

    // Ph·∫£n h·ªìi ƒë∆°n h√†ng ƒë√£ c·∫≠p nh·∫≠t
    res.status(200).json({
      message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng",
      order: updatedOrder,
    });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng:", error);
    res.status(500).json({ message: "L·ªói server", error });
  }
};
exports.updateReviewStatus = async (req, res) => {
  const { orderId } = req.params; // L·∫•y ID ƒë∆°n h√†ng v√† s·∫£n ph·∫©m t·ª´ URL
  const { isReviewed } = req.body; // L·∫•y tr·∫°ng th√°i isReviewed t·ª´ body request

  try {
    // Ki·ªÉm tra tr·∫°ng th√°i isReviewed c√≥ h·ª£p l·ªá hay kh√¥ng
    if (typeof isReviewed !== "boolean") {
      return res
        .status(400)
        .json({ message: "Tr·∫°ng th√°i isReviewed kh√¥ng h·ª£p l·ªá" });
    }

    // T√¨m ƒë∆°n h√†ng theo orderId
    const order = await Order.findById(orderId);
    if (!order) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i isReviewed
    item.isReviewed = isReviewed;

    // L∆∞u l·∫°i ƒë∆°n h√†ng sau khi c·∫≠p nh·∫≠t
    await order.save();

    res.status(200).json(order);
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i isReviewed:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

// X√≥a ƒë∆°n h√†ng theo ID
exports.deleteOrder = async (req, res) => {
  const { id } = req.params; // L·∫•y ID t·ª´ tham s·ªë URL

  try {
    const deletedOrder = await Order.findByIdAndDelete(id);
    if (!deletedOrder) {
      return res.status(404).json({ message: "Order not found" });
    }
    res.status(204).json(); // Tr·∫£ v·ªÅ m√£ tr·∫°ng th√°i 204 No Content
  } catch (error) {
    console.error("Error deleting order:", error);
    res.status(500).json({ message: "Server error" });
  }
};
