const Cart = require("../models/Cart");

exports.addToCart = async (req, res) => {
  const { userId, productId, quantity } = req.body;

  try {
    let cart = await Cart.findOne({ userId });

    if (cart) {
      // N·∫øu gi·ªè h√†ng ƒë√£ t·ªìn t·∫°i
      const itemIndex = cart.items.findIndex(
        (item) => item.productId.toString() === productId
      );
      if (itemIndex > -1) {
        // N·∫øu s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
        cart.items[itemIndex].quantity += quantity;
      } else {
        // N·∫øu s·∫£n ph·∫©m ch∆∞a c√≥, th√™m m·ªõi v√†o gi·ªè h√†ng
        cart.items.push({ productId, quantity });
      }
    } else {
      // N·∫øu gi·ªè h√†ng ch∆∞a t·ªìn t·∫°i, t·∫°o gi·ªè h√†ng m·ªõi
      cart = new Cart({
        userId,
        items: [{ productId, quantity }],
      });
    }

    await cart.save();
    res.status(200).json(cart);
    console.log("cart", cart); // Tr·∫£ v·ªÅ gi·ªè h√†ng ƒë√£ c·∫≠p nh·∫≠t
  } catch (error) {
    console.error("Error adding to cart:", error); // Ghi l·∫°i l·ªói ƒë·ªÉ ki·ªÉm tra
    res.status(500).json({ message: "Error adding to cart", error });
  }
};
exports.removeFromCart = async (req, res) => {
  const { userId, productId } = req.body;
  try {
    const cart = await Cart.findOne({ userId });
    if (!cart)
      return res.status(404).json({ message: "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i" });

    // X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
    cart.items = cart.items.filter(
      (item) => item.productId.toString() !== productId
    );
    await cart.save();

    res
      .status(200)
      .json({ message: "X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng th√†nh c√¥ng", cart });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
};

// Controller c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
exports.updateCartItem = async (req, res) => {
  const { userId, productId, quantity } = req.body;

  try {
    const cart = await Cart.findOne({ userId });
    console.log("üöÄ ~ exports.updateCartItem= ~ cart:", cart);
    if (!cart)
      return res.status(404).json({ message: "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i" });

    // T√¨m v√† c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
    const itemIndex = cart.items.findIndex(
      (item) => item.productId.toString() === productId
    );

    if (itemIndex === -1)
      return res
        .status(404)
        .json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong gi·ªè h√†ng" });

    cart.items[itemIndex].quantity = quantity;
    await cart.save();

    res
      .status(200)
      .json({ message: "C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m th√†nh c√¥ng", cart });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
};
exports.getCart = async (req, res) => {
  const { userId } = req.params; // L·∫•y userId t·ª´ URL

  try {
    const cart = await Cart.findOne({ userId });

    if (!cart) {
      return res.status(404).json({ message: "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i" });
    }

    res.status(200).json(cart); // Tr·∫£ v·ªÅ gi·ªè h√†ng n·∫øu t√¨m th·∫•y
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
};
